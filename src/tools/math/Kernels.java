package tools.math;

/**
 * A list of kernel constants.
 * 
 * @author Peter Bugaj
 */
public class Kernels {

	/**
	 * The matrix representing the 4 pixel neighbourhood region used
	 * in the expansion of a connected components algorithm.
	 */
	public static final byte [][] neighourhoodSmall = new byte[][]{
		new byte[]{0, 1},
		new byte[]{1, 2},
		new byte[]{2, 1},
		new byte[]{1, 0},
	};
	
	/**
	 * The matrix representing the 8 pixel neighbourhood region used
	 * in the expansion of a connected components algorithm.
	 */
	public static final byte [][] neighMap = new byte[][]{
		new byte[]{0, 0},
		new byte[]{0, 1},
		new byte[]{0, 2},
		new byte[]{1, 2},
		new byte[]{2, 2},
		new byte[]{2, 1},
		new byte[]{2, 0},
		new byte[]{1, 0},
	};

	/**
	 * The 3 by 3 Gaussian blur kernel.
	 */
	public static final float [][] blur3 = new float[][]{
		new float[]{0.0625f,	0.125f,		0.0625f		},
		new float[]{0.125f,		0.25f,		0.125f	},
		new float[]{0.0625f,	0.125f,		0.0625f		},
	};

	/**
	 * The 5 by 5 Gaussian blur kernel.
	 */
	public static final float [][] blur5 = new float[][]{
		new float[]{2/159.0f,	4/159.0f,	5/159.0f,	4/159.0f,	2/159.0f},
		new float[]{4/159.0f,	9/159.0f,	12/159.0f,	9/159.0f,	4/159.0f},
		new float[]{5/159.0f,	12/159.0f,	15/159.0f,	12/159.0f,	5/159.0f},
		new float[]{4/159.0f,	9/159.0f,	12/159.0f,	9/159.0f,	4/159.0f},
		new float[]{2/159.0f,	4/159.0f,	5/159.0f,	4/159.0f,	2/159.0f},
	};	

	/**
	 * The 7 by 7 Gaussian blur kernel.
	 */
	public static final float [][] blur7 = new float[][]{

		new float[]{0.00000067f,	0.00002292f,	0.00019117f,	0.00038771f,	0.00019117f,	0.00002292f,	0.00000067f},
		new float[]{0.00002292f,	0.00078634f,	0.00655965f,	0.01330373f,	0.00655965f,	0.00078633f,	0.00002292f},
		new float[]{0.00019117f,	0.00655965f,	0.05472157f,	0.11098164f,	0.05472157f,	0.00655965f,	0.00019117f},
		new float[]{0.00038771f,	0.01330373f,	0.11098164f,	0.22508352f,	0.11098164f,	0.01330373f,	0.00038771f},
		new float[]{0.00019117f,	0.00655965f,	0.05472157f,	0.11098164f,	0.05472157f,	0.00655965f,	0.00019117f},
		new float[]{0.00002292f,	0.00078633f,	0.00655965f,	0.01330373f,	0.00655965f,	0.00078633f,	0.00002292f},
		new float[]{0.00000067f,	0.00002292f,	0.00019117f,	0.00038771f,	0.00019117f,	0.00002292f,	0.00000067f}
	};

	/**
	 * The 9 by 9 Gaussian blur kernel.
	 */
	public static final float [][] blur9 = new float[][]{
		new float[]{1.1060461E-5f,	7.921191E-5f,	3.2323404E-4f,	7.5154164E-4f,	9.95631E-4f,	7.5154164E-4f,	3.2323404E-4f,	7.921191E-5f,	1.1060461E-5f,	},
		new float[]{7.921191E-5f,	5.672934E-4f,	0.0023149112f,	0.0053823297f,	0.0071304287f,	0.0053823297f,	0.0023149112f,	5.672934E-4f,	7.921191E-5f,	},
		new float[]{3.2323404E-4f,	0.0023149112f,	0.009446283f,	0.021963267f,	0.029096602f,	0.021963267f,	0.009446283f,	0.0023149112f,	3.2323404E-4f,	},
		new float[]{7.5154164E-4f,	0.0053823297f,	0.021963267f,	0.051066127f,	0.06765162f,	0.051066127f,	0.021963267f,	0.0053823297f,	7.5154164E-4f,	},
		new float[]{9.95631E-4f,	0.0071304287f,	0.029096602f,	0.06765162f,	0.089623846f,	0.06765162f,	0.029096602f,	0.0071304287f,	9.95631E-4f,	},
		new float[]{7.5154164E-4f,	0.0053823297f,	0.021963267f,	0.051066127f,	0.06765162f,	0.051066127f,	0.021963267f,	0.0053823297f,	7.5154164E-4f,	},
		new float[]{3.2323404E-4f,	0.0023149112f,	0.009446283f,	0.021963267f,	0.029096602f,	0.021963267f,	0.009446283f,	0.0023149112f,	3.2323404E-4f,	},
		new float[]{7.921191E-5f,	5.672934E-4f,	0.0023149112f,	0.0053823297f,	0.0071304287f,	0.0053823297f,	0.0023149112f,	5.672934E-4f,	7.921191E-5f,	},
		new float[]{1.1060461E-5f,	7.921191E-5f,	3.2323404E-4f,	7.5154164E-4f,	9.95631E-4f,	7.5154164E-4f,	3.2323404E-4f,	7.921191E-5f,	1.1060461E-5f,	}
	};
	
	/**
	 * The 11 by 11 Gaussian blur kernel.
	 */
	public static final float [][] blur11 = new float[][]{
		new float[]{7.082329E-6f,	3.5787645E-5f,	1.2616656E-4f,	3.103197E-4f,	5.325107E-4f,	6.37531E-4f,	5.3251046E-4f,	3.103197E-4f,	1.261665E-4f,	3.5787678E-5f,	7.082329E-6f,	},
		new float[]{3.5787645E-5f,	1.8083818E-4f,	6.37531E-4f,	0.0015680733f,	0.0026908244f,	0.0032215014f,	0.0026908237f,	0.0015680733f,	6.3753064E-4f,	1.8083835E-4f,	3.5787645E-5f,	},
		new float[]{1.2616656E-4f,	6.37531E-4f,	0.002247566f,	0.0055281203f,	0.009486291f,	0.011357152f,	0.00948629f,	0.0055281203f,	0.0022475647f,	6.375316E-4f,	1.2616656E-4f,	},
		new float[]{3.103197E-4f,	0.0015680733f,	0.0055281203f,	0.013596981f,	0.02333251f,	0.027934086f,	0.023332508f,	0.013596982f,	0.005528118f,	0.0015680748f,	3.103197E-4f,	},
		new float[]{5.325107E-4f,	0.0026908244f,	0.009486291f,	0.02333251f,	0.04003875f,	0.047935084f,	0.040038746f,	0.023332514f,	0.009486286f,	0.0026908268f,	5.325107E-4f,	},
		new float[]{6.37531E-4f,	0.0032215014f,	0.011357152f,	0.027934086f,	0.047935084f,	0.057388708f,	0.047935072f,	0.02793409f,	0.011357146f,	0.0032215042f,	6.37531E-4f,	},
		new float[]{5.3251046E-4f,	0.0026908237f,	0.00948629f,	0.023332508f,	0.040038746f,	0.047935072f,	0.040038735f,	0.02333251f,	0.009486285f,	0.0026908263f,	5.3251046E-4f,	},
		new float[]{3.103197E-4f,	0.0015680733f,	0.0055281203f,	0.013596982f,	0.023332514f,	0.02793409f,	0.02333251f,	0.013596984f,	0.005528118f,	0.0015680748f,	3.103197E-4f,	},
		new float[]{1.261665E-4f,	6.3753064E-4f,	0.0022475647f,	0.005528118f,	0.009486286f,	0.011357146f,	0.009486285f,	0.005528118f,	0.0022475636f,	6.375312E-4f,	1.261665E-4f,	},
		new float[]{3.5787678E-5f,	1.8083835E-4f,	6.375316E-4f,	0.0015680748f,	0.0026908268f,	0.0032215042f,	0.0026908263f,	0.0015680748f,	6.375312E-4f,	1.8083853E-4f,	3.5787678E-5f,	},
		new float[]{7.082329E-6f,	3.5787645E-5f,	1.2616656E-4f,	3.103197E-4f,	5.325107E-4f,	6.37531E-4f,	5.3251046E-4f,	3.103197E-4f,	1.261665E-4f,	3.5787678E-5f,	7.082329E-6f,	}	
	};

	/**
	 * The horizontal kernel for edge detection.
	 */
	public static final float [][] edge_x = new float[][]{
		new float[]{-1,0,1},
		new float[]{-2,0,2},
		new float[]{-1,0,1}
	};

	/**
	 * The vertical kernel for edge detection.
	 */
	public static final float [][] edge_y = new float[][]{
		new float[]{-1,-2,-1},
		new float[]{ 0, 0, 0},
		new float[]{ 1, 2, 1}
	};	
}
